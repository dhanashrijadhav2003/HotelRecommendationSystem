<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Area Details</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/css/bootstrap.min.css"
        integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">

  <style>
    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      color: #333;
      min-height: 100vh;
    }
    .container {
      background: #fff;
      border-radius: 16px;
      padding: 25px;
      margin: 10px auto;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.25);
      max-width: 95%;
    }
    .form-group {
      display: flex;
      justify-content: center;
      margin-bottom: 30px;
      flex-direction: column;
      align-items: center;
    }
    .form-group input {
      width: 100%;
      max-width: 600px;
      padding: 12px 20px;
      border: 2px solid #4e54c8;
      border-radius: 30px;
      font-size: 16px;
      transition: all 0.3s ease;
      margin-top: 10px;
    }
    .form-group input:focus {
      outline: none;
      border-color: #8f94fb;
      box-shadow: 0 0 10px rgba(142, 148, 251, 0.4);
    }
    .page-heading {
      font-size: 2.5rem;
      font-weight: 700;
      text-align: center;
      color: #4e54c8;
      margin-bottom: 10px;
      letter-spacing: 1px;
      animation: fadeIn 1s ease-in-out;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    table {
      width: 100%;
      border-collapse: collapse;
      border-radius: 12px;
      overflow: hidden;
    }
    thead {
      background: linear-gradient(to right, #4B0082, #FFA500, #d5d575);
      color: white;
    }
    th, td {
      padding: 14px 10px;
      text-align: center;
      font-size: 15px;
      border-bottom: 1px solid #e0e0e0;
    }
    tbody tr {
      background-color: #f9f9f9;
      transition: background-color 0.2s;
    }
    tbody tr:hover {
      background-color: #eef1ff;
    }
    a {
      color: #4e54c8;
      text-decoration: none;
      font-weight: bold;
    }
    a:hover {
      color: #8f94fb;
      text-decoration: underline;
    }
    @media (max-width: 768px) {
      th, td {
        font-size: 13px;
        padding: 10px;
      }
    }
    @media (max-width: 576px) {
      table, thead, tbody, th, td, tr {
        display: block;
      }
      thead tr {
        display: none;
      }
      tbody tr {
        margin-bottom: 15px;
        background: #f4f4f4;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        padding: 10px;
      }
      td {
        text-align: left;
        padding: 8px 12px;
        position: relative;
      }
      td::before {
        content: attr(data-label);
        font-weight: bold;
        display: block;
        margin-bottom: 4px;
        color: #4e54c8;
      }
    }
  </style>
</head>
<body>
<div class="form-group mt-5">
  <h1 class="page-heading">Area Details</h1>
  <input type="text" id="searchInput" placeholder="Search by Area Name..." />
</div>

<div class="container">
  <table class="table">
    <thead>
    <tr>
      <th>AREA_ID</th>
      <th>AREA_NAME</th>
      <th>CITY_NAME</th>
      <th>PINCODE</th>
      <th>UPDATE</th>
      <th>DELETE</th>
    </tr>
    </thead>
    <tbody id="tblBody1"></tbody>
  </table>

  <div class="d-flex justify-content-center mt-3">
    <nav>
      <ul class="pagination" id="pagination"></ul>
    </nav>
  </div>
</div>

<script>
  // Sample data; replace with your server-side data as needed
  const data = <%- JSON.stringify(data || []) %>;

  const rowsPerPage = 5;
  let currentPage = 1;
  let filteredData = [...data];

  const tableBody = document.getElementById('tblBody1');
  const paginationWrapper = document.getElementById('pagination');
  const searchInput = document.getElementById('searchInput');

  function displayTableItems(items, wrapper, rowsPerPage, page) {
    wrapper.innerHTML = "";
    page--;

    const start = rowsPerPage * page;
    const end = start + rowsPerPage;
    const paginatedItems = items.slice(start, end);

    if (paginatedItems.length === 0) {
      wrapper.innerHTML = `<tr><td colspan="6">There is no data present in table.</td></tr>`;
      return;
    }

    for (let item of paginatedItems) {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td data-label="AREA_ID">${item.area_id}</td>
        <td data-label="AREA_NAME">${item.area_name}</td>
        <td data-label="CITY_NAME">${item.city_name}</td>
        <td data-label="PINCODE">${item.pincode}</td>
        <td data-label="UPDATE"><a href="/updateArea?area_id=${item.area_id}">Update</a></td>
        <td data-label="DELETE"><a href="/deleteArea?area_id=${item.area_id}">Delete</a></td>
      `;
      wrapper.appendChild(row);
    }
  }

  function setupPagination(items, wrapper, rowsPerPage) {
    wrapper.innerHTML = "";
    const pageCount = Math.ceil(items.length / rowsPerPage);

    // Previous Button
    const prev = document.createElement('li');
    prev.className = 'page-item' + (currentPage === 1 ? ' disabled' : '');
    prev.innerHTML = `<a class="page-link" href="#">Previous</a>`;
    prev.addEventListener('click', function (e) {
      e.preventDefault();
      if (currentPage > 1) {
        currentPage--;
        updateDisplay();
      }
    });
    wrapper.appendChild(prev);

    // Page Numbers
    for (let i = 1; i <= pageCount; i++) {
      const li = document.createElement('li');
      li.className = 'page-item' + (i === currentPage ? ' active' : '');
      li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
      li.addEventListener('click', function (e) {
        e.preventDefault();
        currentPage = i;
        updateDisplay();
      });
      wrapper.appendChild(li);
    }

    // Next Button
    const next = document.createElement('li');
    next.className = 'page-item' + (currentPage === pageCount ? ' disabled' : '');
    next.innerHTML = `<a class="page-link" href="#">Next</a>`;
    next.addEventListener('click', function (e) {
      e.preventDefault();
      if (currentPage < pageCount) {
        currentPage++;
        updateDisplay();
      }
    });
    wrapper.appendChild(next);
  }

  function updateDisplay() {
    displayTableItems(filteredData, tableBody, rowsPerPage, currentPage);
    setupPagination(filteredData, paginationWrapper, rowsPerPage);
  }

  // Search handler
  searchInput.addEventListener('input', function () {
    const searchTerm = this.value.trim().toLowerCase();
    filteredData = data.filter(item => item.area_name.toLowerCase().includes(searchTerm));
    currentPage = 1; // reset to first page on new search
    updateDisplay();
  });

  // Initial render
  updateDisplay();
</script>
</body>
</html>
