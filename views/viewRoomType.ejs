<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Hotel Room Prices</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/css/bootstrap.min.css" />
  <style>
    body {
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      background: #f2f3f7;
      padding-top: 40px;
    }

    .container {
      background: #fff;
      border-radius: 12px;
      padding: 30px;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
      max-width: 95%;
    }

    .page-heading {
      font-size: 2.5rem;
      font-weight: 700;
      text-align: center;
      color: #4e54c8;
      margin-bottom: 25px;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    thead {
      background: linear-gradient(to right, #4b0082, #ffa500, #d5d575);
      color: white;
    }

    th, td {
      padding: 14px;
      text-align: center;
      font-size: 15px;
      border-bottom: 1px solid #ddd;
    }

    tbody tr:hover {
      background-color: #eef1ff;
    }

    @media (max-width: 576px) {
      table, thead, tbody, th, td, tr {
        display: block;
      }

      thead {
        display: none;
      }

      tbody tr {
        margin-bottom: 15px;
        background: #f4f4f4;
        border-radius: 10px;
        padding: 10px;
      }

      td {
        text-align: left;
        padding: 10px;
        position: relative;
      }

      td::before {
        content: attr(data-label);
        font-weight: bold;
        color: #4e54c8;
        display: block;
        margin-bottom: 5px;
      }
    }
  </style>
</head>
<body>

<div class="container">
  <h1 class="page-heading">Hotel Room Price List</h1>

  <table class="table">
    <thead>
      <tr>
        <th>HOTEL_NAME</th>
        <th>ROOM_TYPE</th>
        <th>PRICE</th>
      </tr>
    </thead>
    <tbody id="tblBody1"></tbody>
  </table>

  <div class="d-flex justify-content-center mt-3">
    <ul class="pagination" id="pagination"></ul>
  </div>
</div>

<script>
  const data = <%- JSON.stringify(data || []) %>;
  const rowsPerPage = 5;
  let currentPage = 1;

  function displayTableItems(data, wrapper, rowsPerPage, page) {
    wrapper.innerHTML = "";
    page--;

    const start = rowsPerPage * page;
    const end = start + rowsPerPage;
    const paginatedItems = data.slice(start, end);

    if (paginatedItems.length === 0) {
      wrapper.innerHTML = `<tr><td colspan="3">There is no data present in table.</td></tr>`;
      return;
    }

    for (const item of paginatedItems) {
      const row = document.createElement("tr");
      row.innerHTML = `
        <td data-label="HOTEL_NAME">${item.hotel_name}</td>
        <td data-label="ROOM_TYPE">${item.room_type}</td>
        <td data-label="PRICE">${item.price}</td>
      `;
      wrapper.appendChild(row);
    }
  }

  function setupPagination(data, wrapper, rowsPerPage) {
    wrapper.innerHTML = "";
    const pageCount = Math.ceil(data.length / rowsPerPage);

    const prevLi = document.createElement("li");
    prevLi.className = "page-item" + (currentPage === 1 ? " disabled" : "");
    const prevLink = document.createElement("a");
    prevLink.className = "page-link";
    prevLink.href = "#";
    prevLink.innerText = "Previous";
    prevLink.onclick = (e) => {
      e.preventDefault();
      if (currentPage > 1) {
        currentPage--;
        displayTableItems(data, document.getElementById("tblBody1"), rowsPerPage, currentPage);
        setupPagination(data, wrapper, rowsPerPage);
      }
    };
    prevLi.appendChild(prevLink);
    wrapper.appendChild(prevLi);

    for (let i = 1; i <= pageCount; i++) {
      const li = document.createElement("li");
      li.className = "page-item" + (currentPage === i ? " active" : "");
      const a = document.createElement("a");
      a.className = "page-link";
      a.href = "#";
      a.innerText = i;
      a.onclick = (e) => {
        e.preventDefault();
        currentPage = i;
        displayTableItems(data, document.getElementById("tblBody1"), rowsPerPage, currentPage);
        setupPagination(data, wrapper, rowsPerPage);
      };
      li.appendChild(a);
      wrapper.appendChild(li);
    }

    const nextLi = document.createElement("li");
    nextLi.className = "page-item" + (currentPage === pageCount ? " disabled" : "");
    const nextLink = document.createElement("a");
    nextLink.className = "page-link";
    nextLink.href = "#";
    nextLink.innerText = "Next";
    nextLink.onclick = (e) => {
      e.preventDefault();
      if (currentPage < pageCount) {
        currentPage++;
        displayTableItems(data, document.getElementById("tblBody1"), rowsPerPage, currentPage);
        setupPagination(data, wrapper, rowsPerPage);
      }
    };
    nextLi.appendChild(nextLink);
    wrapper.appendChild(nextLi);
  }

  // Initial render
  displayTableItems(data, document.getElementById("tblBody1"), rowsPerPage, currentPage);
  setupPagination(data, document.getElementById("pagination"), rowsPerPage);
</script>

</body>
</html>
